// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scan.proto

package apstfrpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PayRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayRequest) Reset()         { *m = PayRequest{} }
func (m *PayRequest) String() string { return proto.CompactTextString(m) }
func (*PayRequest) ProtoMessage()    {}
func (*PayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01fcc0924d8161d, []int{0}
}

func (m *PayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayRequest.Unmarshal(m, b)
}
func (m *PayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayRequest.Marshal(b, m, deterministic)
}
func (m *PayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayRequest.Merge(m, src)
}
func (m *PayRequest) XXX_Size() int {
	return xxx_messageInfo_PayRequest.Size(m)
}
func (m *PayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayRequest proto.InternalMessageInfo

type PayReply struct {
	Err                  *Error   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayReply) Reset()         { *m = PayReply{} }
func (m *PayReply) String() string { return proto.CompactTextString(m) }
func (*PayReply) ProtoMessage()    {}
func (*PayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01fcc0924d8161d, []int{1}
}

func (m *PayReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayReply.Unmarshal(m, b)
}
func (m *PayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayReply.Marshal(b, m, deterministic)
}
func (m *PayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayReply.Merge(m, src)
}
func (m *PayReply) XXX_Size() int {
	return xxx_messageInfo_PayReply.Size(m)
}
func (m *PayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PayReply.DiscardUnknown(m)
}

var xxx_messageInfo_PayReply proto.InternalMessageInfo

func (m *PayReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func init() {
	proto.RegisterType((*PayRequest)(nil), "apstfrpb.PayRequest")
	proto.RegisterType((*PayReply)(nil), "apstfrpb.PayReply")
}

func init() { proto.RegisterFile("scan.proto", fileDescriptor_e01fcc0924d8161d) }

var fileDescriptor_e01fcc0924d8161d = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4e, 0x4e, 0xcc,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0x2c, 0x28, 0x2e, 0x49, 0x2b, 0x2a, 0x48,
	0x92, 0xe2, 0x4e, 0x2d, 0x2a, 0xca, 0x2f, 0x82, 0x08, 0x2b, 0xf1, 0x70, 0x71, 0x05, 0x24, 0x56,
	0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xe9, 0x72, 0x71, 0x80, 0x79, 0x05, 0x39, 0x95,
	0x42, 0x8a, 0x5c, 0xcc, 0xa9, 0x45, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xfc, 0x7a,
	0x30, 0xed, 0x7a, 0x60, 0xdd, 0x41, 0x20, 0x39, 0x23, 0x4b, 0x2e, 0x96, 0xe0, 0xe4, 0xc4, 0x3c,
	0x21, 0x43, 0x2e, 0xe6, 0x80, 0xc4, 0x4a, 0x21, 0x11, 0x84, 0x22, 0x84, 0x99, 0x52, 0x42, 0x68,
	0xa2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xeb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x64, 0x37, 0xcc, 0xa3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScanClient is the client API for Scan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScanClient interface {
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error)
}

type scanClient struct {
	cc *grpc.ClientConn
}

func NewScanClient(cc *grpc.ClientConn) ScanClient {
	return &scanClient{cc}
}

func (c *scanClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error) {
	out := new(PayReply)
	err := c.cc.Invoke(ctx, "/apstfrpb.Scan/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScanServer is the server API for Scan service.
type ScanServer interface {
	Pay(context.Context, *PayRequest) (*PayReply, error)
}

// UnimplementedScanServer can be embedded to have forward compatible implementations.
type UnimplementedScanServer struct {
}

func (*UnimplementedScanServer) Pay(ctx context.Context, req *PayRequest) (*PayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}

func RegisterScanServer(s *grpc.Server, srv ScanServer) {
	s.RegisterService(&_Scan_serviceDesc, srv)
}

func _Scan_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apstfrpb.Scan/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apstfrpb.Scan",
	HandlerType: (*ScanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pay",
			Handler:    _Scan_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scan.proto",
}
